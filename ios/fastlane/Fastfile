# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    ITUNES_USER = ENV["ITUNES_USER"]
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    # match(type: 'development')
    match(type: 'appstore')
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Register new device"
  lane :register_new_device do  |options|
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(
                     devices: device_hash
                     )
    refresh_profiles
  end

  # A helper lane for refreshing provisioning profiles.
  lane :refresh_profiles do
    # match(
    #   type: "development",
    #   force: true)
    match(
      type: "adhoc",
      force: true)
  end

  # Builds the app without signing
  lane :test_build do |options|
    # Install pods
    cocoapods

    # Build the app
    xcodebuild(
      workspace: "IoEudiwApp.xcworkspace",
      scheme: "ioeudiw",
      configuration: "Debug",
      clean: options[:clean],
      build: true,
      destination: "generic/platform=iOS",
      build_settings: {
        "CODE_SIGNING_REQUIRED" => "NO",
        "CODE_SIGN_IDENTITY" => ""
      }
    )
  end

  # Builds the app for TestFlight releases
  lane :do_testflight_build do
    sync_code_signing(type: "appstore", username: ITUNES_USER)

    # Install pods
    cocoapods

    # build the app
    gym(
      scheme: "ioeudiw",
      clean: true,
      export_method: "app-store",
      workspace: "IoEudiwApp.xcworkspace",
      include_symbols: false
    )
  end

  desc "Submit a new Beta Build to TestFlight"
  lane :beta_testflight do |options|
    
    # xCode 14.2, prevents altool to fail with error "Could not
    # determine the package’s bundle ID" during the "pilot" step
    # See https://github.com/fastlane/fastlane/issues/20741
    ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'false'

    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number
    build_number = get_build_number

    # Get the current version from the project
    version_number = get_version_number

    do_testflight_build

    # generate the changelog based on last commits
    changelog = changelog_from_git_commits(
      tag_match_pattern: "ios/testflight/*"
    )

    versioning_paths = [
      "ioeudiw.xcodeproj/project.pbxproj",
      "ioeudiw/Info.plist",
      "ioeudiwTests/Info.plist"
    ]
    # git_add(path: versioning_paths)
    # git_commit(path: versioning_paths, message: "[fastlane] New iOS/TestFlight build v#{version_number} (build #{build_number}) [skip ci]")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    # add_git_tag(tag: "ios/testflight/#{version_number}/#{build_number}")

    # Push the new commit and tag back to your git remote
    # push_to_git_remote

    # upload to itunes store
    pilot(
      username: ITUNES_USER,
      changelog: changelog,
      skip_waiting_for_build_processing: true
    )
  end

  desc "Submit a new Beta Build to TestFlight, using CircleCI"
  lane :beta_circleci_testflight do |options|

    # xCode 14.2, prevents altool to fail with error "Could not
    # determine the package’s bundle ID" during the "pilot" step
    # See https://github.com/fastlane/fastlane/issues/20741
    ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'false'

    # Setup the CI environment
    setup_ci()

    # use the App Store API Key to authenticate
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APP_STORE_API_KEY_ID']}",
      issuer_id: "#{ENV['APP_STORE_API_KEY_ISSUER_ID']}",
      key_filepath: "./fastlane/AuthKey_#{ENV['APP_STORE_API_KEY_ID']}.p8",
      duration: 1200,
    )

    sync_code_signing(type: "appstore", api_key: api_key)

    # Install pods
    cocoapods

    # build the app
    gym(
      scheme: "ioeudiw",
      clean: true,
      export_method: "app-store",
      workspace: "IoEudiwApp.xcworkspace",
      include_symbols: false
    )

    previous_tag = sh("git tag --sort=-taggerdate | grep \\\\-rc\\\\. | sed -n '2 p' | tr -d '\n'")

    # generate the changelog based on last commits
    changelog = changelog_from_git_commits(
      tag_match_pattern: "*" +previous_tag + "*" ,
      pretty:"- %s",
      merge_commit_filtering: "exclude_merges"
    )

    # upload to App store
    pilot(
      api_key: api_key,
      changelog: changelog,
      # max wait for App Store Connect processing (30 min)
      wait_processing_timeout_duration: 1800
    )
  end

end
